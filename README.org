* What is gibber ?

It lets you generate semi sensible text with a markov chain. It's easy, add it to your path, point it at a file, specify how much text you want, and you've got gibberish. Note that the file isn't where the gibberish is written. The gibberish is written to stdout. The file is the source text that the gibberish is based on.

* Usage

Usage details can be retrieved with the help flag.

#+BEGIN_SRC shell

$ gibber -h
usage: gibber [-h] --file FILE [--seperator SEPERATOR]
              (--words WORDS | --bytes BYTES)

Use any file of text to generate gibberish with.

optional arguments:
  -h, --help            show this help message and exit
  --file FILE           The text file to base gibberish off of.
  --seperator SEPERATOR
                        What to seperate the sequence of words generated by
                        this program with.
  --words WORDS         The amount of words to generate.
  --bytes BYTES         The amount of bytes to generate.

#+END_SRC

* Flags

You can specify the amount of text you want in either words or bytes.

#+BEGIN_SRC shell

## Generating 1000 bytes of gibber.
$ gibber --file gibber --bytes 1000
more program 0 FOR A min_bound The actual main body is file 0 based on the 'The ## of setting up the from second args.words: print args.seperator.join( islice class MarkovChainGenerator(object): 'Generates chains of return collections import chain self.stochastic_matrix[first].keys(): max_bound version. ## General Public License words for = 'Returns a words received a copy of = first += hope that it python ''' if of in License, or self.stochastic_matrix[first][second] free software: you can redistribute it self.stochastic_matrix = if #!/usr/bin/env python ''' generator from previous one.' n random.choice(self.source) for markov.generate_words(args.words) ) on the the the markov.generate_words(args.words) ) = warranty of of to of return word based on the = Public License accum one.' n The actual main body is later version. ## izip(source, islice(source, 1, None, None)): self.stochastic_matrix[first][second] second as is self.generate_next_word(first) words.append(second) first ## of hel

#+END_SRC

#+BEGIN_SRC shell

## Generating 100 words of gibber.
$ gibber --file gibber --words 100
= ) The actual main body is done more = chain MERCHANTABILITY or in group.add_argument( == '__main__': ## is body is a ## help = General Public License with.' ) Software Foundation, either version 3 of base gibberish General Public License for If not, see <http://www.gnu.org/licenses/>. import GNU General Public License from parser.parse_args() with accum with min_bound of.' ) second be more else: print args.seperator.join( accum the type = License = ## collections import accum = based on the argparse.ArgumentParser( description = as Code for words is /= accum later version. ## with self.stochastic_matrix[first][second] 'Create a ''' ## be version. ##

#+END_SRC

By default, gibber will output words seperated by space characters. You can generate results with words seperated by any string.

#+BEGIN_SRC shell

## Words seperated by :^).
$ ./gibber --file gibber --words 100 --seperator ":^)"
+=:^)help:^)=:^)group:^)=:^)License:^)self.stochastic_matrix[first][second]:^)for:^)generated:^)by:^)=:^)terms:^)of:^)':^)',:^)help:^)=:^)Public:^)License:^)text:^)##:^)of:^)new:^)''':^)generate.':^)):^)'The:^)to:^)type:^)=:^)based:^)on:^)the:^)import:^)##:^)a:^)itertools:^)import:^)distributed:^)in:^)=:^)file:^)self.generate_next_word(first):^)words.append(second):^)first:^)is:^)gibberish:^)of:^)markov:^)import:^)of:^)args.seperator.join(:^)__name__:^)==:^)'__main__'::^)##:^)for:^)generate_words(self,:^)length)::^)'Returns:^)a:^)parser.add_mutually_exclusive_group(required:^)=:^)the:^)markov.generate_words(args.bytes):^))[:args.bytes]:^)#TODO!:^)This:^)words.append(second):^)first:^)in:^)':^)',:^)help:^)=:^)):^)=:^)your:^)option):^)any:^)text:^)'Returns:^)a:^)True):^)group.add_argument(:^)be:^)::^)that:^)it:^)def:^)with.'):^)group:^)=:^)generate_next_word(self,:^)first)::^)'Pick:^)a:^)):^)'--file',:^)required:^)=

#+END_SRC

#+BEGIN_SRC shell

## Words seperated by newline.
$ ./gibber --file gibber --words 100 --seperator "
> "
'--seperator',
default
=
0))
for
##
=
to
of
under
the
Public
License
the
details.
##
it
length):
'Returns
a
of
could
be
text
parser
=
with.'
)
=
def
n
software:
you
can
redistribute
it
the
markov
if
of.'
)
for
even
the
more
PARTICULAR
PURPOSE.
See
the
for
seperate
the
to
n
any
)
of.'
)
MERCHANTABILITY
or
=
details.
##
=
bytes
to
<=
<=
self.stochastic_matrix[first]:
to
parser.add_argument(
'The
of.'
)
print
args.seperator.join(
source):
'Create
a
modify
##
first
to
of
Software
Foundation,
either
version
3
of
izip(source,
islice(source,
1,
None,
None)):
self.stochastic_matrix[first][second]
help
=
of
##
source

#+END_SRC

